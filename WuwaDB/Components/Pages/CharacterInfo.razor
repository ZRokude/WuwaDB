@page "/Character/{CharacterName}"
@using WuwaDB.DBAccess.Enum
@using WuwaDB.DBAccess.Entities.Character
@using WuwaDB.Components.Shared

<div>
    @if (!isLoading)
    {
        <MudContainer>
            <Microsoft.AspNetCore.Components.Authorization.AuthorizeView Roles="Admin">
                <Authorized>
                    <MudToolBar>
                        <MudButton Variant="Variant.Filled" Color="Color.Info" StartIcon="@Icons.Material.Filled.Settings" OnClick="OpenDialog">
                            Edit Character
                        </MudButton>
                    </MudToolBar>
                </Authorized>
            </Microsoft.AspNetCore.Components.Authorization.AuthorizeView>
            <div class="fixed-image-container character-card-container">
                <MudCardMedia Image="@(GetImageModelRoot(CharacterName))" Class="character-card bg-color-transparent"/>
            </div>
            <MudGrid Class="justify-mud-grid" Spacing="0">
                <MudItem>
                    <MudStack AlignItems="AlignItems.End" Wrap="Wrap.Wrap" Class="limited-width-container">
                        <MudPaper Elevation="5" Class=" custom-paper" Style="width:360px;">
                            <MudToolBar WrapContent="true" Class="justify-content-center">
                                <MudText Align="Align.Center" Inline="true" GutterBottom="true" Style="color:#cfcfcf;">Character Stat</MudText>
                            </MudToolBar>
                            @foreach (var property in typeof(Character_Stats_Base).GetProperties())
                            {
                                if (property.Name != "Id" && property.Name != "CharacterId" && property.Name != "Character")
                                {
                                    <MudStack Row="true" Justify="Justify.SpaceBetween">
                                        <MudTooltip Text="@GetStatProp(property.Name)" style="color:#cfcfcf;">
                                            <MudImage Style="width:40px;" Src=@($"Icon/AttributeStat/{property.Name}.png")/>
                                        </MudTooltip>
                                        @if (CharacterStatBase != null)
                                        {
                                            var propertyValue = property.GetValue(CharacterStatBase);
                                            <MudText Align="Align.Center" Style="padding-top:4%;color:#cfcfcf;">
                                                @if (property.PropertyType == typeof(double))
                                                {
                                                    @($"{propertyValue ?? 0}%")
                                                }
                                                else
                                                {
                                                    @($"{propertyValue}")
                                                }
                                            </MudText>
                                        }
                                        else
                                        {
                                            <MudText Align="Align.Center" Style="padding-top:4%;color:#cfcfcf;">0</MudText>
                                        }
                                    </MudStack>
                                }

                            }
                            <MudSlider @bind-Value="LevelSlider" Min="1" Max="90" Step="1" ValueLabel="true" Immediate="true" Style="color:#cfcfcf;">
                                Level: @LevelSlider
                                <MudAutocomplete T="int" @bind-Value="LevelSlider" TextChanged="StatLevelChanged"
                                                 Immediate="true" Style="display:none!important;" Disabled="true"/>
                            </MudSlider>
                        </MudPaper>
                        @foreach (SkillType skillType in Enum.GetValues(typeof(SkillType)))
                        {
                            <MudStack AlignItems="AlignItems.End">
                                <MudPaper Elevation="5" Class="custom-paper">
                                    <MudToolBar WrapContent="true" Class="justify-content-center">
                                        <MudStack Row="true" AlignItems="AlignItems.End" Spacing="3">
                                            <MudTooltip Text="@GetSkillName(skillType)">
                                                <MudImage Style="width:50px;" Src="@(GetImageSkillRoot(CharacterName, GetSkillName(skillType)))" />
                                            </MudTooltip>
                                            <MudStack Spacing="1" Row="true">
                                                <MudButton OnClick="() => ToggleSkillInfo(skillType)" Style="color:#cfcfcf;font-family:'HHenum-Regular;">
                                                    Skill Info
                                                </MudButton>
                                                <MudButton OnClick="() => ToggleSkillDetail(skillType)" Style="color:#cfcfcf;font-family:'HHenum-Regular;">
                                                    Skill Detail
                                                </MudButton>
                                                <MudIconButton Icon="@Icons.Material.Filled.ArrowDownward" Size="Size.Medium" OnClick="() => ToggleCollapse(skillType)"/>
                                            </MudStack>
                                        </MudStack>
                                    </MudToolBar>
                                    <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center">
                                        <MudCollapse Expanded="@IsCollapsed(skillType)">
                                            @if (SkillInfo(skillType) == true)
                                            {
                                                var type = CharacterSkills.FirstOrDefault(x => x.Type == skillType);
                                                if (type is not null)
                                                {
                                                    if (!string.IsNullOrEmpty(CharacterSkills.FirstOrDefault(x => x.Type == skillType)?.Description))
                                                    {
                                                        foreach (var segment in GetHighlightedSegments(TextSkillInfo(skillType)))
                                                        {
                                                            <MudText Align="Align.Center" Style="color:#D8D8D8;font-family:'HHenum-Regular';font-size:24px;">
                                                                <MudHighlighter HighlightedTexts="highLightedTexts" UntilNextBoundary="true"
                                                                                Text="@segment"
                                                                                Style="@($"{colorHighLight};font-family:HHenum-Regular;font-size:24px;")" Class="highlight-description" />
                                                            </MudText>
                                                        }
                                                        <br />
                                                    }
                                                    var characterSkillDesc = CharacterSkillDescriptions.Where(x => x.CharacterSkillId == type.Id).ToList();
                                                    if (characterSkillDesc.Count > 0)
                                                    {
                                                        foreach (var title in characterSkillDesc)
                                                        {
                                                            <MudText Align="Align.Center" Style="color:#CDBC64;font-weight:bold;font-family:'HHenum-Italic';font-size:30px;">
                                                                @title.DescriptionTitle
                                                            </MudText>
                                                            foreach(var segment in GetHighlightedSegments(title.Description))
                                                            {
                                                                <MudText Align="Align.Center" Style="color:#D8D8D8;font-family:'HHenum-Regular';font-size:22px;">
                                                                    <MudHighlighter HighlightedTexts="highLightedTexts" UntilNextBoundary="true"
                                                                                    Text="@segment"
                                                                                    Style="@($"{colorHighLight};font-family:HHenum-Regular;font-size:24px;")" Class="highlight-description" />
                                                                </MudText>
                                                            }
                                                            <br />
                                                        }
                                                        
                                                    }
                                                }
                                            }
                                            @if (SkillDetail(skillType) == true)
                                            {
                                                var type = CharacterSkills.FirstOrDefault(x => x.Type == skillType);
                                                if (type is not null)
                                                {
                                                    var skillDetails = CharacterSkillDetails.Where(
                                                        x => x.CharacterSkillId == type.Id).ToList();
                                                    if (skillDetails.Count > 0)
                                                    {
                                                        foreach (var skillDetail in skillDetails)
                                                        {
                                                            
                                                            <MudStack Row="true" Spacing="15" Wrap="Wrap.Wrap" Justify="Justify.SpaceBetween">
                                                                <MudText Style="color:#cfcfcf;font-family:HHenum-Regular;font-size:24px;"> @skillDetail.SkillDetailsName</MudText>
                                                                <MudText Style="color:#cfcfcf;font-family:HHenum-Regular;font-size:24px;">
                                                                    @($"{GetSkillDetailNumber(SkillTypeLevelSlider[skillType], skillDetail.Id)}%")
                                                                </MudText>
                                                            </MudStack>

                                                        }
                                                    }
                                                    
                                                }
                                                <MudSlider @bind-Value="SkillTypeLevelSlider[skillType]" Min="1" Max="20" Step="1" ValueLabel="true" Immediate="true" Style="color:#cfcfcf;">
                                                    <MudTextField T="int" @bind-Value="SkillTypeLevelSlider[skillType]" Style="display:none!important;" 
                                                                  Disabled="true" TextChanged="SkillDetailLevelChanged">

                                                    </MudTextField>
                                                </MudSlider>
                                            }
                                        </MudCollapse>
                                    </MudStack>
                                </MudPaper>
                            </MudStack>
                        }
                    </MudStack>
                </MudItem>
            </MudGrid>
        </MudContainer>
    }
    else
    {
        <LoadingScreen></LoadingScreen>
    }

</div>

@code {
   
   
}
 